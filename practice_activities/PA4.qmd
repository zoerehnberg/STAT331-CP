---
title: "PA 4: Military Spending"
subtitle: "Tidy Data with dplyr and tidyr"
format: 
  html:
    self-contained: true
    code-tools: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

```{r setup}
# load packages
library(readxl) 
library(tidyverse)
```

Today you will be tidying messy data to explore the relationship between countries of the world and military spending.

[Download starter .qmd file](PA4.qmd)

[Download data -- `gov_spending_per_capita.xlsx`](gov_spending_per_capita.xlsx)


## Data Description


We will be using data from the Stockholm International Peace Research Institute (SIPRI). The SIPRI Military Expenditure Database is an open source data set containing time series on the military spending of countries from 1949--2019. The database is updated annually, which may include updates to data from previous years.

Military expenditure is presented in many ways:

+ in local currency and in US \$ (both from 2018 and current);
+ in terms of financial years and calendar years;
+ as a share of GDP and per capita.

The availability of data varies considerably by country, but we note that data is available from at least the late 1950s for a majority of countries that were independent at the time. Estimates for regional military expenditure have been extended backwards depending on availability of data, but no estimates for total world military expenditure are available before 1988 due to the lack of data fo omthe Soviet Union.

SIPRI military expenditure data is based on open sources only.

## Data Import

First, you should notice that there are ten different sheets included in the data set. We are interested in the sheet labeled *"Share of Govt. spending"*, which contains information about the share of all government spending that is allocated to the military.

Next, you'll notice that there are notes about the data set in the first six rows. Ugh! Also notice that the last six rows are footnotes about the data set. **Ugh**!

Rather than copying this one sheet into a new Excel file and deleting the first and last few rows, let's learn something new about the `read_xlsx()` function!

::: callout-tip
## Data Import with `read_xlsx()`

The `read_xlsx()` function has several useful arguments:

+ `sheet`: specify the name of the sheet that you want to use. The name must be passed in as a string (in quotations)!
+ `skip`: specify the number of rows you want to skip *before* reading in the data.
+ `n_max`: specify the maximum number of rows of data to read in.
:::

**1. Modify the code below (potentially including the file path) to read the military expenditures data into your workspace.**

```{r military-data}
military <- read_xlsx("gov_spending_per_capita.xlsx", 
                      sheet = , 
                      skip  = , 
                      n_max = )
```

::: callout-warning
If you have the Excel file open on your computer while trying to import the data, you may get an error. If you do, close the Excel file and try running your code again.
:::


## Data Cleaning

In addition to `NA`s, missing or unavailable values were coded two ways.

**2. Find these two methods and write the code to replace these values with NAs. Save the mutated data set into a new object named `military_clean`.**

::: callout-tip
The information in the top 6 rows of the excel sheet will help you answer this question.

Helpful functions: `mutate()`, `across()` -- you will need two of these, `na_if()`

**Note:** When referring to one of the year variable names, you **must** put tick marks (above the tab key) around the name. Starting the name of a variable with a number is not commonly read as a variable name. E.g., to read the 1988 column through the 2018 column, use ``` `1988`:`2019` ```.
:::

```{r}
# Code for completing Q2
```

Because characters were used to indicate missing values, all of the columns 1988 through 2019 were read in as characters.

**3. Mutate these columns to be numeric data types. Save these changes into an updated version of `military_clean`.**

```{r}
# Code for Q3
```

If you give the `Country` column a look, you'll see there are names of **continents and regions** included. These names are only included to make it simpler to find countries, as they contain no data.

Luckily for us, these region names were also stored in the *"Regional totals"* sheet. We can use the `Region` column of this data set to filter out the names we don't want.

Run the code below to read in the *"Regional totals"* data set, making any necessary modifications to the file path.

```{r regional-totals}
cont_region <- read_xlsx("gov_spending_per_capita.xlsx", 
                      sheet = "Regional totals", 
                      skip = 14) |> 
  filter(Region != "World total (including Iraq)", 
         Region != "World total (excluding Iraq)")
```

If we want to `filter()` data so that only certain values of a variable are retained, we should remember our friendly `%in%` function. Looking at the code below, however, you should notice that we retain only the values we wanted to **remove**!

```{r}
military_clean |> 
  filter(Country %in% cont_region$Region)
```

A clever way to filter out observations you **don't want** is with a join. A tool tailored just for this scenario is the `anti_join()` function. This function will return all of the rows of one data set **without** a match in another data set.

**4. Use the `anti_join()` function to filter out the `Country` values we don't want in the `military_clean` data set. The `by` argument needs to be filled with the name(s) of the variables that the two data sets should be joined with.**

```{r}
# Code for Q4
```

::: callout-tip
Join by different variables on `dataX` and `dataY`: `join_by(a == b)` will match `dataX$a` to `dataY$b`.:::

::: callout-note
### Canvas Q1

**5. What four regions were NOT removed from the `military_clean` data set?** 
:::

::: callout-tip
Think about what uniquely separates the rows for the regions from the rows for the countries.

Useful functions: `filter()`, `if_all()`, `is.na`
:::

```{r}
# Code for Q5
```


## Data Organization

We want to look at military expenditures across every year in the data. Our desired plot looks something like this:

![Desired plot: synthetic data used for demonstration -- your plot will have different values.](https://github.com/earobinson95/stat331-calpoly/blob/master/practice-activities/government_spending_synthetic_plot.png?raw=true)

::: callout-warning
Unfortunately, creating this plot requires that every year is in a **single column**!
:::

To tidy a data set like this, we need to pivot the columns of years from wide format to long format. To do this process we need three arguments:

+ `cols`: The set of columns that represent values, not variables. In these data, those are all the columns from `1988` to `2019`.

+ `names_to`: The name of the variable that should be created to move these columns into. In these data, this could be `"Year"`.

+ `values_to`: The name of the variable that should be created to move these column's values into. In these data, this could be labeled `"Spending"`.

These form the three required arguments for the `pivot_longer()` function.

**6. Pivot the cleaned up `military` data set to a "longer" orientation. Save this new "long" version as a new data set called `military_long`.**

```{r}
# Code for Q6
```

::: callout-caution
**Do not** overwrite your cleaned up data set!
:::


## Data Visualization Exploration

Now that we've transformed the data, let's create a plot to explore military spending across countries and across the years.

**7. Create side-by-side box-plots of the military spending for each year. Make sure you change the plot title and axis labels to accurately represent the plot. You might also want to change the x-axis limits and the color of your plots.**

::: callout-tip
Place the `Year` variable on an axis that makes it easier to read the labels!
:::

```{r}
# Code for Q7 plot
```

::: callout-note
### Canvas Q2 + Q3

**8. What year was the second largest military expenditure? What country had this expenditure?**

**9. Look up what the reason for this large expenditure is.**
:::

```{r}
# Code for Q8
```
