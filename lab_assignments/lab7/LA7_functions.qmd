---
title: "Lab 7: Functions + Fish"
author: "Your name"
format: 
  html:
    self-contained: true
    code-tools: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

[Download .qmd starter file](LA7_functions.qmd)

[Download `BlackfootFish.csv`](BlackfootFish.csv)

The goal of this lab is learn more about exploring missing data and writing modular code.

```{r setup}
library(tidyverse)
fish <- read.csv("BlackfootFish.csv")
```

## The Data

This lab's data concerns mark-recapture data on fish from the Blackfoot River, outside of Helena, Montana.

![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/blackfoot_river.jpg?raw=true)

Mark-recapture is a common method used by ecologists to estimate a population's size when it is impossible to conduct a census (count every animal). This method works by *tagging* animals with a tracking device so that scientists can track their movement and presence.

<center>

::: columns
::: {.column width="25%"}
![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/grizzly.jpg?raw=true)
:::

::: {.column width="25%"}
![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/condor.jpg?raw=true)
:::

::: {.column width="25%"}
![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/fish.PNG?raw=true)
:::
:::

</center>

## Data Exploration

The measurements of each captured fish were taken by a biologist on a raft in the river. The lack of a laboratory setting opens the door to the possibility of measurement errors.

#### 1. Summarize the Data

Output ONE table to answer the following two questions:

+ How many observations have missing values?
+ What variable(s) have missing values present?

::: callout-tip
Hint: use `across()`.
:::

```{r}
# Question 1 code
```

#### 2. Visualize the Data

Create a thoughtful visualization that explores the frequency of missing values across the different years, sections, and trips.

```{r}
# Question 2 code
```

## Function Writing: Adjusting the Data

If I wanted to rescale every quantitative variable in my dataset so that they have values between 0 and 1, I could use this formula:

</br>

$$y_{scaled} = \frac{y_i - min\{y_1, y_2,..., y_n\}}{max\{y_1, y_2,..., y_n\} 
- min\{y_1, y_2,..., y_n\}}$$

</br>

The following `R` code will carry out the rescaling procedure for the `length` and `weight` columns of the data:

\vspace{0.25cm}

```{r}
#| echo: true
#| eval: false
BlackfootFish <- BlackfootFish |> 
  mutate(length = (length - min(length, na.rm = TRUE)) / 
           (max(length, na.rm = TRUE) - min(length)), 
         weight = (weight - min(weight, na.rm = TRUE)) / 
           (max(weight, na.rm = TRUE) - min(length, na.rm = TRUE)))
```

This process of duplicating an action multiple times can make it difficult to understand the intent of the process. Additionally, it can make it very difficult to spot mistakes. *Did you spot the mistake in the weight conversion?*

**When you find yourself copy-pasting, it's time to write a function, instead!**

#### 3. Write a Function

Let's transform the repeated process above into a `rescale_01()` function.

- The function should take a single vector as its input.
- The function should return the rescaled vector.

::: callout-tip
Think about the **efficiency** of your function. Are you calling the **same** function multiple times?

Look into the function `range()`.
:::

```{r}
rescale_01 <- function(x){
  
  # Question 3 & 4 code

}
```

#### 4. Add Stops

Let's incorporate some checks into your function. Modify your previous code to create the following checks:

- The function should stop if the input vector is not numeric.
- The function should stop if the length of the vector is not greater than 1.

::: callout-tip
No need to create a new code chunk here -- simply add these stops to your function above!
:::

#### 5. Perform a Simple Test

Run the code below to test your function. Verify that the maximum of your rescaled vector is 1 and the minimum is 0!

```{r}
x <- c(1:25, NA)

rescaled <- rescale_01(x)
min(rescaled, na.rm = TRUE)
max(rescaled, na.rm = TRUE)
```

#### 6. Perform a More Difficult Test

Next, let's test the function on the `length` column of the `BlackfootFish` data.

The code below makes a histogram of the original values of `length`. Add a plot of the rescaled values of `length`. Output your plots side-by-side (like challenge 1), so the reader can confirm the only aspect that has changed is the scale.

::: callout-warning
This will require you to call your `rescaled_01()` function within a `mutate()` statement in order to create a `length_scaled` variable.
:::

::: callout-tip
Set the y-axis limits for both plots to be from 0 to 4000 to allow for direct comparison across plots.
:::

```{r}
fish |>  
  ggplot(aes(x = length)) + 
  geom_histogram(binwidth = 45) +
  labs(x = "Original Values of Fish Length (mm)") +
  scale_y_continuous(limits = c(0,4000))

# Question 6 plot code
```

#### 7. Incorporte Variables

Suppose you would like for your `rescale()` function to perform operations on a variable within a dataset. Ideally, your function would take in a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` function that accepts two arguments: (1) a dataframe and (2) the name(s) of the variable(s) to be rescaled. The body of the function should call the original `rescale_01()` function you wrote previously.

::: callout-tip
If you are struggling with this task, I recommend reading the [Data frame functions](https://r4ds.hadley.nz/functions.html#data-frame-functions) section from R4DS.

Also, take a look at the slides from class on Wednesday!
:::

```{r}
rescale_column <- function(data, variables){
  
  # Question 7 code
  
}
```

#### 8. Another Function Test

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

::: callout-warning
I expect that you carry out this process by calling the `rescale_column()` function *one* time!
:::

```{r}
# original values
fish |> 
 select(length:weight) |> 
 head()

# rescaled values

# Question 8 code

```
