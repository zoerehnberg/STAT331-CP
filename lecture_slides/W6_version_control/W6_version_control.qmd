---
title: "Version Control"
format: 
  revealjs:
    theme: default
    auto-stretch: false
editor: source
embed-resources: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(liver)
data(cereal)
```

## Monday, May 6

Today we will...

+ Open-Ended Analysis from Week 5
+ Questions about Midterm?
+ Final Project Group Formation
+ New Material
  + git/GitHub
  + Connect GitHub to RStudio
+ [PA 6: Merge Conflicts](https://zoerehnberg.github.io/STAT331-S23/practice_activities/PA6.html) -- Collaborating within a GitHub Repo


## Open-Ended Analysis from Week 5

**Written Description**

+ Start with an intro to the data and topic.
+ Intersperse written description and table / plot output!
+ Do not use variable names or R function names in your written text.
+ Breaking up sections with headers can help with organization and flow.
+ Do not print out the data!


## Open-Ended Analysis from Week 5

**"Table of Summary Statistics"**

+ **Not asking for inferential statistics!**
+ E.g., We can construct a table of the mean amount of protein per manufacturer and shelf.

```{r}
#| echo: true
#| code-fold: true
#| fig-align: center
cereal |> 
  group_by(manuf, shelf) |> 
  summarize(mean_protein = mean(protein)) |> 
  arrange(shelf) |> 
  pivot_wider(id_cols = manuf,
              names_from = shelf,
              values_from = mean_protein,
              names_prefix = "Shelf_")
```


## Open-Ended Analysis from Week 5

**Table Design**

+ Think about the number of rows/columns -- is it readable?
+ Change row/column names to be understandable.

**Plot Design**

+ What type of plot will best display the data?
+ What order of elements will best display the comparison you want to make?
+ Think about: colors, order of categories, if a legend is needed, etc.


# Questions about Midterm Exam?


## Final Project Group Formation

You will be completing a final project in teams of four.

+ **Group Formation Survey** due **Monday, 5/13 at 11:59pm**
  + Help me gather information about your preferences and work styles to facilitate team formation.
  + Your team does not all need to be in the same section, but you might find it useful for in-class work time.
+ Group Contracts (5/20)
+ Project Proposal (5/28)
+ Linear Regression (6/3)
+ Final Deliverable (6/12)


## What is version control?

<br>

A process of **tracking changes** to a file or set of files over time so that you can **recall specific versions later**.


# git/GitHub Basics


## Git vs GitHub

:::: columns
::: column

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png") 
```

+ A system for version control that manages a collection of files in a structured way.
+ Uses the command line or a GUI.
+ Git is local.

:::
::: column


:::
::::


## Git vs GitHub

:::: columns
::: column

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png") 
```

+ A system for version control that manages a collection of files in a structured way.
+ Uses the command line or a GUI.
+ Git is local.

:::
::: column

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://pngimg.com/d/github_PNG65.png") 
```

+ A cloud-based service that lets you use git across many computers.
+ Basic services are free, advanced services are paid (like RStudio!). 
+ GitHub is remote.

:::
::::


## Why Learn GitHub?

1. GitHub provides a structured way for tracking changes to files over the course of a project.
  + *Think Google Docs or Dropbox history, but more structured and powerful!*

2. GitHub makes it easy to have multiple people working on the same files at the same time.

3. You can host a URL of fun things (like the class text, these slides, a personal website, etc.) with [GitHub pages](https://pages.github.com/).


## Git Repositories

Git is based on **repositories**.

:::: {.columns}
::: {.column width="80%"}

+ Think of a repository (**repo**) as a directory (folder) for a single project.
  + This directory will likely contain code, documentation, data, to do lists, etc. associated with the project.
  + You can link a local repo with a remote copy.

:::
::: {.column width="20%"}

```{r}
#| fig-align: center
knitr::include_graphics("https://miro.medium.com/max/512/1*w07Er4gPg8H2Ew-P0HhxNA.png")
```

:::
::::

+ To create a repository, you can start with your local computer **or** you can start with the remote copy.



## `.gitignore`

Sometimes there are files that you **do not** want to track.

+ A `.gitignore` file specifies the files that git should intentionally ignore.
+ Often these are machine generated files (e.g., `/bin`, `.DS_Store`) or files/directories that you do not want to be shared (e.g., `solutions/`).
+ **We want to ignore `.Rproj` files!**


# Actions in Git


## Cloning a Repo

:::: columns
::: column

<bR>

Create an exact copy of a remote repo on your local machine.

:::
::: column
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("images/git_clone_diagram.png")
```
:::
::::


## Committing Changes

Tell git you have made changes you want to add to the repo.

+ Also provide a *commit message* -- a short label describing what the changes are and why they exist.

:::: {.columns}
::: {.column width="60%"}

The red line is a change we commit (add) to the repo.

:::
::: {.column width="40%"}

```{r}
#| fig-align: center
knitr::include_graphics("images/git-commit.png")
```

:::
::::

. . .

The log of these changes (and the file history) is called your *git commit history*.

+ You can always go back to old copies!



## Commit Tips

+ Use short, but informative commit messages.
+ Commit small blocks of changes -- commit every time you accomplish a small task. 
  + You’ll have a set of bite-sized changes (with description) to serve as a record of what you’ve done.
  + With frequent commits, its easier to find the issue when you mess up!


## Pushing Changes

:::: columns
::: column

<br>

Update the copy of your repo on GitHub so it has the most recent changes you’ve made on your machine.

:::
::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_push_diagram.png")
```
:::
::::


## Pulling Changes

:::: columns
::: column

<br>

Update the local copy of your repo (the copy on your computer) with the version on GitHub.

:::
::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_pull_diagram.png")
```
:::
::::


## Pushing and Pulling

```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/pushing-and-pulling.jpg")
```


## Workflow

**When you have an existing local repo:**

::: incremental
1. Pull the repo (especially if collaborating).
2. Make some changes locally.
4. Commit the changes to git.
5. Pull any changes from the remote repository (again!).
6. Resolve any merge conflicts.
7. Push your changes to GitHub.

:::


## Merge Conflicts

These occur when git encounters conflicting changes.

</br>

![](images/same-conflict-pull.jpg)

## Merge Conflicts

1. Maybe you are working in real time on the same line of code or text as a collaborator.
2. Maybe you forgot to push your changes the last time you finished working.
3. Maybe you forgot to pull your changes before you started working this time.


## Merge Conflicts

**We will work on resolving merge conflicts today!**

</br>

. . .

But when all else fails...

<center>
**burn your local repo to the ground and clone again.**
</center>

```{r}
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("https://t3.ftcdn.net/jpg/00/60/10/14/240_F_60101445_pT7VV0oc1OZHeyb4bjzsavtJbPk07kWn.jpg")
```


## Tips for Avoiding Merge Conflicts

+ Always **pull** before you start working and always **push** after you are done working!
  + If you do this, you will only have problems if two people are making local changes to **the same line in the same file at the same time**.

. . .

+ If you are working with collaborators in real time, **pull**, **commit**, and **push** often.

. . .

+ Git commits **lines** -- lines of code, lines of text, etc.
  + Practice good code format -- no overly long lines!



# Connect GitHub to RStudio


## Install + Load `R` Packages

Work in your console or an Rscript for this.

1. Install and load the `usethis` package.

```{r}
#| eval: false
#| echo: true
install.packages("usethis")
library(usethis)
```

2. Install and load the `gitcreds` Package.

```{r}
#| eval: false
#| echo: true
install.packages("gitcreds")
library(gitcreds)
```


## Configure git

3. Tell git your email and GitHub username.

```{r}
#| eval: false
#| echo: true
use_git_config(user.name = "JaneDoe2", user.email = "jane@example.org")
```

(Nothing should happen.)


## Generate your Personal Access Token

4. Generate a PAT.

```{r}
#| eval: false
#| echo: true
create_github_token()
```

+ This will open GitHub and ask you to log in.
+ Fill in a Note and an Expiration (AT LEAST 60 days from now).
+ Click `Generate Token`.

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("images/pat-generate.png")
```


## Store your PAT

5. Copy your PAT.

```{r}
#| fig-align: center
#| out-width: 65%
knitr::include_graphics("images/pat-copy.jpg")
```

6. Run the following code.

```{r}
#| eval: false
#| echo: true
gitcreds_set()
```

When prompted to **Enter password or token:**, paste your PAT.


## Verify your PAT

7. Let's verify.

```{r}
#| echo: true
#| eval: false
git_sitrep()
```

```{r}
#| out-width: 90%
knitr::include_graphics("images/pat-verify.png")
```


## [PA 6: Merge Conflicts](https://zoerehnberg.github.io/STAT331-S23/practice_activities/PA6.html)

You will be completing this activity in groups of 4.

::: callout-warning

##    **IMPORTANT**

This activity will only work if you follow the directions **in the exact order** that I have specified them. **Do not work ahead of your group members!**

:::


## To do...

+ **PA 6: Merge Conflicts**
  + Due **Monday, 5/6** at 11:59pm -- **TODAY**.

+ **Midterm Exam**
  + Wednesday, 5/8 + 24 hours.
  
+ **Final Project Group Formation Survey**
  + Due Monday, 5/13 at 11:59pm


::: callout-note

## Office Hours

Tuesday from 1:00-2:00pm and Wednesday 10:30-11:30am. None on Thursday or Friday.
:::
  

## Wednesday, May 8 -- Midterm Exam

+ Please grab separators from the sides of the room as you enter.

+ I will pass out a hard copy of the exam.

+ Canvas will unlock the **.qmd** template at the beginning of class.


## Wednesday, May 8 -- Midterm Exam

**Section 1: General Questions**

+ Cannot work on Section 2 until submit Section 1.

**Section 2: Short Answer**

+ Download `.qmd` template from Canvas.
+ Submit `.qmd` and `.html` files on Canvas by the end of class.

**Section 3: Open-Ended Analysis**

+ Create your own `.qmd` file.
+ Submit `.qmd` and `.html` file **24-hours** after the end of class.


## To do...

+ Read **Chapter 7: Writing Functions**
  + Check-in 7.1 due Monday, 5/13 at 10:00am

+ **Final Project Group Formation**
  + Due Monday, 5/13 at 11:59pm
  
  