---
title: "Version Control"
format: 
  revealjs:
    theme: default
    auto-stretch: false
editor: source
self-contained: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
```

## Monday, May 8

Today we will...

+ Comments from Week 5
+ Final Project Group Formation
+ New Material
  + git/GitHub
  + Connect GitHub to RStudio
+ PA 6: Merge Conflicts -- Collaborating within a GitHub Repo
+ Discuss Group Contract
+ Questions about Midterm?


## Final Project Group Formation

You will be completing a final project in teams of four.

+ **Group Formation Survey** due **Saturday, 5/4 at 11:59pm**
  + Help me gather information about your preferences and work styles to facilitate team formation.
  + Your team does not all need to be in the same section, but you might find it useful for in-class work time.
+ Group Contracts
+ Project Proposal
+ Final Deliverable


## What is version control?

<br>

A process of tracking changes to a file or set of files over time so that you can recall specific versions later.


# git/GitHub Basics


## Git vs GitHub

:::: columns
::: column

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png") 
```

+ A system for version control that manages a collection of files in a structured way.
+ Uses the command line or a GUI.
+ Git is local.

:::
::: column


:::
::::


## Git vs GitHub

:::: columns
::: column

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png") 
```

+ A system for version control that manages a collection of files in a structured way.
+ Uses the command line or a GUI.
+ Git is local.

:::
::: column

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://pngimg.com/d/github_PNG65.png") 
```

+ A cloud-based service that lets you use git across many computers.
+ Basic services are free, advanced services are paid (like RStudio!). 
+ GitHub is remote.

:::
::::


## Why Learn GitHub?

1. GitHub provides a structured way for tracking changes to files over the course of a project.
  + *Think Google Docs or Dropbox history, but more structured and powerful!*

2. GitHub makes it easy to have multiple people working on the same files at the same time.

3. You can host a URL of fun things (like the class text, these slides, a personal website, etc.) with [GitHub pages](https://pages.github.com/).


## Git Repositories

Git is based on **repositories**.

:::: {.columns}
::: {.column width="80%"}

+ Think of a repository (**repo**) as a directory (folder) for a single project.
  + This directory will likely contain code, documentation, data, to do lists, etc. associated with the project.
  + You can link a local repo with a remote copy.

:::
::: {.column width="20%"}

```{r}
#| fig-align: center
knitr::include_graphics("https://miro.medium.com/max/512/1*w07Er4gPg8H2Ew-P0HhxNA.png")
```

:::
::::

+ To create a repository, you can start with your local computer **or** you can start with the remote copy.



## `.gitignore`

Sometimes there are files that you **do not** want to track.

+ A `.gitignore` file specifies the files that git should intentionally ignore.
+ Often these are machine generated files (e.g., `/bin`, `.DS_Store`) or files/directories that you do not want to be shared (e.g., `solutions/`).
+ **We want to ignore `.Rproj` files!**


# Actions in Git


## Cloning a Repo

:::: columns
::: column

<bR>

Create an exact copy of a remote repo on your local machine.

:::
::: column
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("images/git_clone_diagram.png")
```
:::
::::


## Committing Changes

Tell git you have made changes you want to add to the repo.

+ Also provide a *commit message* -- a short label describing what the changes are and why they exist.

:::: {.columns}
::: {.column width="60%"}

The red line is a change we commit (add) to the repo.

:::
::: {.column width="40%"}

```{r}
#| fig-align: center
knitr::include_graphics("images/git-commit.png")
```

:::
::::

. . .

The log of these changes (and the file history) is called your *git commit history*.

+ You can always go back to old copies!


## Pushing Changes

:::: columns
::: column

<br>

Update the copy of your repo on GitHub so it has the most recent changes youâ€™ve made on your machine.

:::
::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_push_diagram.png")
```
:::
::::


## Pulling Changes

:::: columns
::: column

<br>

Update the local copy of your repo (the copy on your computer) with the version on GitHub.

:::
::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_pull_diagram.png")
```
:::
::::


## Pushing and Pulling

```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/pushing-and-pulling.jpg")
```


## Workflow

**When you have an existing local repo:**

::: incremental
1. Pull the repo (especially if collaborating).
2. Make some changes locally.
4. Commit the changes to git.
5. Pull any changes from the remote repository (again!).
6. Resolve any merge conflicts.
7. Push your changes to GitHub.

:::


## Merge Conflicts

These occur when git encounters conflicting changes.

+ You and a collaborator made conflicting changes at the same time.
+ You made changes without starting from the same "state" as the repo you are trying to combine with.

![](images/same-conflict-pull.jpg)

## Troubleshooting Merge Conflicts

1. Maybe you are working in real time on the same line of code or text as a collaborator.
2. Maybe you forgot to push your changes the last time you finished working.
3. Maybe you forgot to pull your changes before you started working this time.

. . .

**We will work on resolving merge conflicts today!**


# Connect GitHub to RStudio


## Install + Load `R` Packages

Work in your console or an Rscript for this.

1. Install and load the `usethis` package.

```{r}
#| eval: false
#| echo: true
install.packages("usethis")
library(usethis)
```

2. Install and load the `gitcreds` Package.

```{r}
#| eval: false
#| echo: true
install.packages("gitcreds")
library(gitcreds)
```


## Configure git

3. Tell git your email and GitHub username.

```{r}
#| eval: false
#| echo: true
use_git_config(user.name = "JaneDoe2", user.email = "jane@example.org")
```

(Nothing should happen.)


## Generate your Personal Access Token

4. Generate a PAT.

```{r}
#| eval: false
#| echo: true
create_github_token()
```

+ This will open GitHub and ask you to log in.
+ Fill in a Note and an Expiration (AT LEAST 60 days from now).
+ Click `Generate Token`.

```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("images/pat-generate.png")
```


## Store your PAT

5. Copy your PAT.

```{r}
#| fig-align: center
#| out-width: 65%
knitr::include_graphics("images/pat-copy.jpg")
```

6. Run the following code.

```{r}
#| eval: false
#| echo: true
gitcreds_set()
```

When prompted to **Enter password or token:**, paste your PAT.


## Verify your PAT

7. Let's verify.

```{r}
#| echo: true
#| eval: false
git_sitrep()
```

```{r}
#| out-width: 90%
knitr::include_graphics("images/pat-verify.png")
```


# PA 6: Merge Conflicts

Collaborating within a GitHub Repo


## Get into your groups!

Designate each person one of the suits:

<center>
![](images/card-suits.jpg){width="20%"}
</center>

You will reference these as you work through the activity.

::: callout-warning
If you only have 3 group members here, assign one person both ![](images/club.jpg){width="3%"} and ![](images/heart.jpg){width="3%"}.

:::


## Flags

<br> 

Please put up your sticky note to indicate your group is ready to move on!


# Repository Setup


##  Create a Repo on GitHub

![](images/club.jpg){width="4%"} 

+ Create a new Github repo: `Repositories` > `New` 
  + Name the repo: `stat331-PA6`
  + You can choose Public or Private.
  + Select `.gitignore template: R`
+ After creating the repo, go to `Settings` > `Collaborators` > `Add people`
  + Add your group members using their username or email.


## Access the Remote Repo

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

+ Accept the repo invite (in your email) -- `View invite` > `Accept invite`
+ Open the repo on GitHub.


## Clone the Remote Repo Locally

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"} 

+ Rstudio: `File` > `New Project` > `Version Control` > `Git`
+ GitHub: click `<> Code` and copy the HTTPS address.
+ Rstudio: paste the address as the `Repository URL`.
+ Click `Browse` and create this new project on your desktop.
  + **Do not save this in your master STAT 331 folder!!! We don't want to embed an Rproj within another Rproj.**
+ `Create Project`


# Collaborating in GitHub


## Add Documents to the Repo

![](images/spade.jpg){width="4%"}

+ Create a new Quarto file.
  + Change the title to "Practice Activity 6".
  + **Resist** the urge to add authors.
  + Save as `PA6.qmd` in your **new** `stat331-PA6` folder.
  + Add `self-contained: true` to the YAML.
  + Render the document.
+ Edit the `.gitignore` file to include `*.Rproj`.


## Push Documents to the Repo

![](images/spade.jpg){width="4%"}

+ Rstudio: `Git` pane > `Commit`
  + Stage (checkmark) the `.gitignore`, add a commit message (*"ignore all .Rproj files"*), click `Commit`, click `Close`.
  + Stage (checkmark) `PA6.qmd` and `PA6.html`, add a commit message (*"create PA quarto file"*), click `Commit`, click `Close`.
+ Rstudio: `Git` pane > `Push` the changes to the remote repo.


## Pull Changes from the Repo

![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

+ Rstudio: `Git` pane > `Pull` the changes that were made!

Everyone should now have the `.qmd` and `.html` files in their local repo!

+ Look in your `Files` pane.


## Make a Change

![](images/diamond.jpg){width="4%"} 

+ Add `author:` to the YAML and include everyone's **first** names.
+ Render the document.
+ Rstudio: `Git` pane > `Commit` > Stage (checkmark) files > add commit message > `Commit`
  + Use a commit message like *"add first names"*.
+ Rstudio: `Git` pane > `Push` the changes.


## Forget to Pull

![](images/spade.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

**Do not** pull the changes that were made!


## Make the Same Change

 ![](images/heart.jpg){width="4%"}

+ Add `author:` to the YAML and include everyone's **first and last** names.
+ Render the document.
+ Rstudio: `Git` pane > `Commit` > Stage (checkmark) files > add commit message > `Commit`
  + Use a commit message like *"add first and last names"*.
+ Rstudio: `Git` pane > `Push` the changes.


## A Merge Conflict

![](images/heart.jpg){width="4%"}

You got an error! Ugh. We forgot to pull before we started making changes.

![](images/same-changes-error.png)


## Resolve the Merge Conflict

 ![](images/heart.jpg){width="4%"}
 
Rstudio: `Git` pane > `Pull` the changes from the repo.

<center>
![](images/same-conflict-pull.jpg){width=65%}
</center>

If your Git Pull window does not look like this:

+ Copy-paste the first command (
<font size = 6>
`git config pull.rebase false`
</font>
) into the Terminal pane and hit Enter.
+ `Pull` again.



## Resolve the Merge Conflict

 ![](images/heart.jpg){width="4%"}

</center>
![](images/fix_conflict.png)
<center>


## Resolve the Merge Conflict

 ![](images/heart.jpg){width="4%"}

::: callout-tip
Note how the conflicting lines are marked! You might need to submit this to Canvas...
:::

+ Edit the `.qmd` file to resolve the conflict with the preferred change. Render.
+ `Commit` your changes.
+ `Push` your changes to GitHub.


## Forget to Pull

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"}

**Do not** pull the changes that were made!


## Make a Different Change

![](images/spade.jpg){width="4%"}

+ Eidt the first code chunk to find the product of $13 \times 13$.
+ Render the document.
+ `Commit` your changes and `Push` your changes to GitHub.

::: callout-warning
**You will get an error**, read it and `Pull`.
:::

+ No merge conflicts should occur! `Push` your changes again.


## Auto Merge

Note: your merge may have been made by a different strategy. That's okay!

![](images/auto_merge.png)


## Forget to Pull

 ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

**Do not** pull the changes that were made!


## Make the Same Change (Again)

![](images/club.jpg){width="4%"}

+ Eidt the first code chunk to find the product of $11 \times 11$.
+ Render the document.
+ `Commit` your changes and `Push` your changes to GitHub.

::: callout-warning
**You will get an error.** Ugh!!!! We forgot to pull again!
:::


## Make the Same Change (Again)

![](images/club.jpg){width="4%"}

+ `Pull` the changes from the repo.
+ Edit the `.qmd` file to resolve the conflict with the preferred change.
+ `Commit` your changes and `Push` your changes to GitHub.


## Final Document

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}
 
 `Pull` the changes and look at your final document.


## Canvas Quiz Submission

How does Git mark the start of lines with a **merge conflict**?

+ Specifically, I want the **four capital characters** with which every conflict is marked.


## Commit Tips

+ Use short, but informative commit messages.
+ Commit small blocks of changes -- commit every time you accomplish a small task. 
  + Youâ€™ll have a set of bite-sized changes (with description) to serve as a record of what youâ€™ve done.
  + With frequent commits, its easier to find the issue when you mess up or end up in a merge conflict.


## Tips for Avoiding Merge Conflicts

+ Always **pull** before you start working and always **push** after you are done working!
  + If you follow this advice exactly, you will only have problems if two of you are making local changes to **the same line in the same file at the same time**.

. . .

+ If you are working with collaborators in real time, **pull**, **commit**, and **push** often.

. . .

+ Git commits **lines** -- lines of code, lines of text, etc.
  + Practice good format and put each sentence on a line.
  

## When all else fails...

Burn your local repo to the ground and clone again.

```{r}
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("https://t3.ftcdn.net/jpg/00/60/10/14/240_F_60101445_pT7VV0oc1OZHeyb4bjzsavtJbPk07kWn.jpg")
```


# Final Project Group Contract


# Questions about Midterm Exam?


## To do...

+ **PA 6: Merge Conflicts**
  + Due **Monday, 5/8** at 11:59pm.

+ **Midterm Exam**
  + Wednesday, 5/10 + 24 hours.
  
+ **Final Project Group Formation Survey**
  + Due Monday, 5/13 at 11:59pm
  
+ **Group Contracts**
  + Due Wednesday, 5/17 at 11:59pm.

::: callout-note
**Extended office hours on Tuesday from 10:00 - 12:00. No office hours on Friday.**
:::
  

## Wednesday, May 10 -- Midterm Exam

+ Please grab separators from the sides of the room as you enter.

+ I will pass out a hard copy of the exam.

+ Canvas will unlock the **.qmd** template at the beginning of class.


## Wednesday, May 10 -- Midterm Exam

**Section 1: General Questions**

+ Cannot work on Section 2 until submit Section 1.

**Section 2: Short Answer**

+ Download `.qmd` template from Canvas.
+ Submit `.qmd` and `.html` files on Canvas by the end of class.

**Section 3: Open-Ended Analysis**

+ Create your own `.qmd` file.
+ Submit `.qmd` and `.html` file **24-hours** after the end of class.


## To do...

+ Read **Chapter 7: Writing Functions**
  + Check-in 7.1 due Monday, 5/15 at 10:00am

+ **Final Project Group Contract**
  + Due Wednesday, 5/17 at 11:59pm
  
  