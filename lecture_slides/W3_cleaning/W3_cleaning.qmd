---
title: "Data Cleaning & Manipulation"
format: 
  revealjs:
        theme: default
editor: source
self-contained: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

## Monday, April 17

Today we will...

+ Review PA 2: Using Data Visualization to Find the Penguins
+ Look at our [Ugly Graphics of Penguins](https://docs.google.com/presentation/d/19bi4KyrpKrjntKtpcKZiZgsVf-cr4X2i2MnQ6hYln7Y/edit?usp=sharing)!
+ Review Lab 2
+ New Material
  + Using `dplyr` verbs to manipulate data
+ [PA 3: Identify the Mystery College](https://earobinson95.github.io/stat331-calpoly/practice-activities/PA3-find-the-mystery-college)


## Example Data set --  [Cereal](https://search.r-project.org/CRAN/refmans/liver/html/cereal.html)

```{r}
#| echo: true
library(liver)
data(cereal)
```

. . .

::: panel-tabset

### Data Structure

```{r}
#| echo: true
str(cereal, give.attr = FALSE)
```

### Data Head

```{r}
#| echo: true
head(cereal)
```

### Data Summary

```{r}
#| echo: true
summary(cereal)
```

:::




# Data Wrangling with `dplyr`

## `dplyr`

`dplyr` provides us with the *"Grammar of Data Manipulation"*.

+ This package gives us the tools to **wrangle, manipulate, and tidy** our data with ease.
+ Check out the `dplyr` [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf).

```{r}
#| echo: false
#| fig-cap: "Data wrangling by Allison Horst"
knitr::include_graphics("https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-artwork/data_cowboy.png")
```


## `dplyr` verbs

+ `filter()` -- **select rows** based on their values
+ `arrange()` -- **sort rows** based on their values
+ `select()` -- **select columns**
+ `mutate()` -- **add new columns** by transforming other columns
+ `summarize()` -- perform **summary operations** on columns
+ `group_by()` -- facilitate **group-wise operations**
+ Use the **pipe operator** (`|>` or `%>%`) to chain together data wrangling operations.


# The Pipe Operator

>No matter how complex and polished the individual operations are, it is often the quality of the glue that most directly determines the power of the system.
>
>— Hal Abelson

## The Pipe Operator

+ With `dplyr`, your code should read **like a sentence**.

```{r}
#| out-width: "30%"
#| fig-align: center
knitr::include_graphics("images/diagram_sentence.jpg")
```

+ The pipe operator is an important part of that readability.

+ The **data** is the primary object in your sentence, so it should **come first in your code**.


## The Pipe Operator

+ The pipe specifies a sequence of operations.
+ The output from one operation is passed into the first argument of the next operation.

. . .

+ The original pipe: `%>%`

  + Loaded with `tidyverse` package (part of `magrittr`).

+ The "native" pipe: `|>`

  + Was created in `R` version 4.1.0.
  + `Tools` > `Global Options...` > `Code` > check `Use native pipe operator`.


## The Pipe Operator

```{r}
#| eval: false
#| echo: true
dr_rehnberg |>
  do_a_dance()
```

. . .

<br>

```{r}
#| eval: false
#| echo: true
dr_rehnberg |>
  put_on("cool hat") |>
  do_a_dance(type = "macarena")
```


## Data Comes First!

<font size = "6">

+ `filter(data = cereal, ...)`
+ `select(data = cereal, ...)`
+ `mutate(data = cereal, ...)`

</font>

. . .

These are equivalent: 

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
summary(data = cereal)
```

:::
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false
cereal |> 
  summary()
```

:::
::::
. . .

<br>

The pipe operator is your friend!

You can also pipe manipulated data or summaries directly into your `ggplot2` code for plotting!


# `filter()`

```{r}
#| fig-align: center
#| fig-cap: "dplyr filter() by Allison Horst"
knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_filter.jpg")
```


## `filter()`

We **filter** to the rows (observations) we would like to **keep** in the data.

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(calories <= 100)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(calories <= 100) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `filter()`

We can add **multiple filters** to our data, to get a more specific subset.

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(calories <= 100,
         type == "hot")
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(calories <= 100,
         type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `filter()`: Handy Helpers!

+ `>` greater than
+ `<` less than
+ `==` equal to
+ `!` not
+ `%in%` identifies if an element belongs to a vector
+ `&` / `,` and
+ `|` or
+ `is.na()` binary evaluation of missing values

## `filter()`: `|`

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(calories <= 100,
         type == "hot")
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(calories <= 100,
         type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

What if I wanted **either** "low calorie" cereals **or** hot cereals...

```{r}
#| echo: true
#| eval: false
#| code-fold: true
cereal |> 
  filter(calories <= 100 |
           type == "hot")
```


## `filter()`: `%in%`

Are you interested in observations with values in a list of levels?

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran"))
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  filter(name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran")) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## How do we "filter" in base `R`?

You can use the `subset()` function!

```{r}
#| echo: true
#| eval: false
subset(cereal, name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran"))
```

```{r}
#| echo: false
#| eval: true
subset(cereal, name %in% c("Cheerios", "Cinnamon Toast Crunch", "Raisin Bran", "Cracklin' Oat Bran")) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
subset(cereal, calories <= 100 & type == "hot")
```

```{r}
#| echo: false
#| eval: true
subset(cereal, calories <= 100 & type == "hot") |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

# `arrange()`


## `arrange()`

We **arrange** the rows of the data in order of a particular variable.

. . .

<br> 

```{r}
#| echo: true
#| eval: false
cereal |> 
  arrange(calories)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  arrange(calories) |>
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

## `arrange()`

We can arrange by **multiple** variables.

. . .

<br>

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: "1-2"
cereal |> 
  arrange(calories, sugars) |>
  select(c(1:4, 10))
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  arrange(calories, sugars) |>
  select(c(1:4, 10)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `arrange()`: Descending Order

Default is ascending order!

```{r}
#| echo: true
#| eval: false
cereal |> 
  arrange(calories)
```

<br>

Need to add `desc()` to get descending order! 

```{r, eval = FALSE}
#| echo: true
cereal |> 
  arrange(desc(calories))
```


## `arrange()`: Related Functions!

These functions implicitly arrange the data before slicing it.

+ `slice()`
+ `slice_min()`
+ `slice_max()`
+ `top_n()`
+ `bottom_n()`


## `slice_max()`

Selects the `n` rows with the maximum values of the specified variable.

```{r}
#| echo: true
#| eval: false
cereal |> 
  slice_max(order_by = sugars, n = 3)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  slice_max(order_by = sugars, n = 3) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
cereal |> 
  slice_max(order_by = sugars, n = 3, with_ties = FALSE)
```


## How do we "arrange" in base `R`?

You can use the `order()` function!

```{r}
#| echo: true
#| eval: false
cereal[order(cereal$calories),]
```

```{r}
#| echo: false
#| eval: true
cereal[order(cereal$calories),] |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
cereal[order(cereal$calories, cereal$sugars),]
```

```{r}
#| echo: false
#| eval: true
cereal[order(cereal$calories, cereal$sugars),] |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```


# `select()`


## `select()`

We **select** which variables we would like to remain in the data.

. . .

```{r}
#| eval: false
#| echo: true
cereal |> 
  select(name, manuf, calories, cups)
```

```{r}
#| echo: false
cereal |> 
  select(name, manuf, calories, cups)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `select()`

You can use `:` to select a sequence of columns! 

```{r}
#| echo: true
#| eval: false
cereal |> 
  select(name:calories)
```

```{r}
#| echo: false
#| eval: true
cereal |> 
  select(name:calories)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "250px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

You can **remove** columns from the dataset using a `-`. 

```{r}
#| echo: true
#| eval: false
cereal |> 
  select(-rating)
```

## `select()`: Reordering

You can reorder columns inside of `select()`!

```{r}
#| echo: true
#| eval: false
cereal |> 
  select(name, rating, manuf, type, calories, cups, weight,
         everything())
```

```{r}
#| echo: false
cereal |> 
  select(name, rating, manuf, type, calories, cups, weight,
         everything()) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `select()`: Handy Helpers!

- `everything()` -- selects all columns **that you have not already specified**
- `starts_with()` -- selects columns with names that **start with** the specified string
- `ends_with()` -- selects columns with names that **end with** the specified string
- `contains()` -- selects columns with names that **contain** the specified string


## `rename()`

- You can rename columns with `select()`, but all columns not specified will be dropped.
  * Using the `rename()` function is easier! 

```{r}
#| echo: true
#| eval: false
cereal |> 
  rename(temp = type)
```

```{r}
#| echo: false
cereal |> 
    rename(temp = type) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## How do we "select" in base `R`?

You don't really use a specific function!

```{r}
#| echo: true
#| eval: false
cereal[,c("name", "manuf", "calories", "cups")]
```

```{r}
#| echo: false
#| eval: true
cereal[,c("name", "manuf", "calories", "cups")]|> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

```{r}
#| echo: true
#| eval: false
subset(cereal, select = -c(rating))
```

. . .

<br>

```{r}
#| echo: true
#| eval: false
colnames(cereal)[2:4] <- c("maker","temp","cals")
```


# `mutate()`

```{r}
#| fig-align: center
#| fig-cap: "Mutate (by Allison Horst)"
knitr::include_graphics("https://github.com/allisonhorst/stats-illustrations/raw/main/rstats-artwork/dplyr_mutate.png")
```


## `mutate()`

The data set gets **mutated** to either **include a new variable**...

```{r}
#| eval: false
#| echo: true
cereal |> 
  mutate(cal_per_cup = calories / cups)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  mutate(cal_per_cup = calories / cups)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

OR **revise an existing variable**.

```{r}
#| eval: false
#| echo: true
cereal |> 
  mutate(shelf = as.factor(shelf))
```

## `mutate()`: Handy Helpers!

+ `if_else()` or `case_when()` -- shortcut for `if-else` loop
+ `as.factor()`, `as.numeric()`, etc. -- change variable type
+ `+`, `-`, `*`, `/` -- basic mathematical operations
+ `%%` -- modulo (returns the remainder when doing division)


## How do we "mutate" in base `R`?

You can define new columns!

```{r}
#| echo: true
#| eval: false
cereal$cal_per_cup <- cereal$calories / cereal$cups
```

```{r}
#| echo: false
#| eval: true
tmp <- cereal
tmp$cal_per_cup <- tmp$calories / tmp$cups
tmp |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```

. . .

OR overwrite old ones!

```{r}
#| echo: true
#| eval: false
cereal$shelf <- as.factor(cereal$shelf)
```


# `group_by()`

```{r}
#| fig-align: center
#| fig-cap: "The ungroup() command is just as important as the group_by() command! (by Allison Horst)"
knitr::include_graphics("https://raw.githubusercontent.com/allisonhorst/stats-illustrations/main/rstats-blanks/ungroup_blank.png")
```


## `group_by()`

**Separate** the data into different groups based on a **categorical** variable.

* The data gets grouped, but nothing happens externally.

```{r}
#| echo: true
cereal |> 
  group_by(type)
```

```{r}
#| eval: true
#| echo: false
cereal |> 
    group_by(type)  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "200px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `ungroup()`

The `ungroup()` function will remove the internal grouping in your data.

+ This is not something that you typically need to do, but if you are getting weird errors downstream from a `group_by()` statement, try ungrouping your data!


# `summarize()`

`group_by()` is almost always paired with `summarize()`!

## `summarize()`

We can calculate **summaries** of variables in the data.

. . .

```{r}
#| echo: true
#| eval: true
cereal |> 
  summarise(mean_calories = mean(calories))
```

. . .

Or **multiple** summaries at the same time.

```{r}
#| echo: true
cereal |> 
summarise(mean_calories = mean(calories),
          num_cereals = n(),
          mean_sugar = mean(sugars))
```

. . .

::: callout-note
`summarize()` and `summarise()` are synonyms!
:::


## `summarize()`: Handy Helpers!

- `mean()`, `median()`, `sd()`, `sum()`
- `min()`, `max()`
- `n()`, `n_distinct()` -- counts the number of (distinct) elements
- `first()`, `last()`, `nth()` -- extract the first, last, or nth element
- `across()` -- apply a function **across** columns


## `group_by() + summarize()`!

1. `goup_by` a variable (or multiple variables)
2. `summarize` a variable (or multiple variables) **within** the groups

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(manuf) |> 
  summarise(mean_calories = mean(calories))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(manuf) |> 
  summarise(mean_calories = mean(calories))  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## `group_by() + mutate()`!

1. `goup_by` a variable (or multiple variables)
2. `mutate` a variable (or multiple variables) **within** the groups

```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(manuf) |> 
  mutate(mean_calories = mean(calories))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  group_by(manuf) |> 
  mutate(mean_calories = mean(calories))  |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "300px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## Glue it all together!

```{r}
#| echo: true
#| eval: false
cereal |> 
  filter(type == "cold") |> 
  mutate(cal_per_cup = calories / cups) |> 
  group_by(manuf) |> 
  summarise(mean_cal_per_cup = mean(cal_per_cup))
```

```{r}
#| eval: true
#| echo: false
cereal |> 
  filter(type == "cold") |> 
  mutate(cal_per_cup = calories / cups) |> 
  group_by(manuf) |> 
  summarise(mean_cal_per_cup = mean(cal_per_cup)) |> 
  knitr::kable() |> 
  kableExtra::scroll_box(height = "400px") |> 
  kableExtra::kable_styling(font_size = 30)
```


## Save your changes!

When you manipulate your data, make sure you assign your new dataset to a variable.

```{r}
#| code-line-numbers: '1'
#| echo: true
#| eval: false
cereal_summary <- cereal |> 
  filter(type == "cold") |> 
  mutate(cal_per_cup = calories / cups) |> 
  group_by(manuf) |> 
  summarise(mean_cal_per_cup = mean(cal_per_cup))
```


## Code Formatting

Similar to `ggplot` formatting with `+`, **do not** continue a line after writing a `|>`!

::: panel-tabset

### Bad Practice

```{r}
#| echo: true
#| eval: false
cereal |> group_by(type) |> summarise(mean_calories = mean(calories), num_cereals = n(), mean_sugar = mean(sugars))
```

### Good Practice
```{r}
#| echo: true
#| eval: false
cereal |> 
  group_by(type) |> 
  summarise(mean_calories = mean(calories), 
            num_cereals = n(),
            mean_sugar = mean(sugars))
```
:::

## [PA 3: Identify the Mystery College](https://earobinson95.github.io/stat331-calpoly/practice-activities/PA3-find-the-mystery-college)

Today you will use the `dplyr` package to clean some data and then use that cleaned data to figure out what college Ephelia has been accepted to.

> Submit the full name of the college Ephelia will attend to the Canvas Quiz.

```{r}
#| fig-align: center
knitr::include_graphics("https://news.winona.edu/wp-content/uploads/2019/01/45201097362_49075670b8_k.jpg")
```

## To do...

+ **PA 3: Identify the Mystery College**
  + Due Wednesday 1/25 at 8:00am

## Wednesday, April 19

Today we will...

+ Review PA 3: Identify the Mystery College
+ Extending `dplyr` verbs
  + `across()`
  + `if_else()`
  + `case_when()`
+ Implication of Data Ethics
+ Lab 3: Hip Hop Lyrics
+ Challenge 3: Published Comparisons & Data Ethics

# Extending `dplyr` verbs

## Example Data set --  [Cereal](https://search.r-project.org/CRAN/refmans/liver/html/cereal.html)

```{r}
#| echo: true
library(liver)
data(cereal)
```

::: panel-tabset

### Data Structure

```{r}
#| echo: true
str(cereal, give.attr = FALSE)
```

### Data Head

```{r}
#| echo: true
head(cereal)
```

### Data Summary

```{r}
#| echo: true
summary(cereal)
```

:::

## Summarize or mutate multiple columns with `across()`

```{r}
#| echo: true
cereal |> 
  group_by(type) |> 
  summarise(across(.cols = calories:potass, .fns = mean))
```

## Discritize with `if_else()`

```{r}
#| echo: true
cereal |> 
  mutate(cal_cateory = if_else(calories < 100, "low", "high"), .after = calories)
```

## Re-leveling with `case_when()`

```{r}
#| echo: true
cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina"
                           )
  )
```


## `group_by()` + `slice()`

```{r}
#| echo: true
cereal |> 
  group_by(manuf) |> 
  slice_max(order_by = calories)
```

## Multiple Variables in `slice()`

```{r}
#| echo: true
cereal |> 
  arrange(calories, sugars) |> 
  slice(1:3)
```

## Piping into `ggplot()`

```{r}
#| output-location: slide
#| echo: true
#| code-line-numbers: false
#| fig-align: center
cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina"
                           )
  ) |> 
  filter(type == "cold") |> 
  mutate(cal_per_cup = calories / cups) |> 
  group_by(manuf) |> 
  summarise(mean_cal_per_cup = mean(cal_per_cup)) |> 
  ggplot(aes(x = manuf, 
             y = mean_cal_per_cup, 
             shape = manuf)) +
  geom_point(show.legend = FALSE,
             size = 3) +
  labs(x = "Manufacturer",
       subtitle = "Calories per cup (mean)") +
  theme_bw() +
  theme(axis.title.y = element_blank(),
        axis.title.x  = element_text(size = 32),
        plot.subtitle = element_text(size = 32),
        axis.text = element_text(size = 28)
        )
```

# Implication of Data Ethics

## Data Science Oath

> I will not be ashamed to say, “I know not,” nor will I fail to call in my colleagues when the skills of another are needed for solving a problem.​

> I will respect the privacy of my data subjects, for their data are not disclosed to me that the world may know, so I will tread with care in matters of privacy and security.

> I will remember that my data are not just numbers without meaning or context, but represent real people and situations, and that my work may lead to unintended societal consequences, such as inequality, poverty, and disparities due to algorithmic bias.

::: callout-note
+ [National Academy of Sciences](https://en.wikipedia.org/wiki/National_Academy_of_Sciences)
+ [Data Values and Principles](https://datapractices.org/manifesto/)
:::

## ASA Ethical Guidelines

The American Statistical Association’s Ethical Guidelines for Statistical Practice are intended to help statistics practitioners make decisions ethically. Additionally, the ethical guidelines aim to promote accountability by informing those who rely on statistical analysis of the standards they should expect.

>Visit [Ethical Guidelines for Statistical Practice](https://www.amstat.org/your-career/ethical-guidelines-for-statistical-practice) and discuss one of the guidelines with your partner. 
>
> + What surprises you? What did you learn? 
> + What scenario might this come into play?

## Institutional Review Board

IRB reviews help to ensure that research participants are protected from research-related risks and treated ethically, a necessary prerequisite for maintaining the public’s trust in the research enterprise and allowing science to advance for the common good.

::: callout-note
[Watch a video about IRB](https://www.youtube.com/watch?v=U8fme1boEbE&ab_channel=U.S.DepartmentofHealthandHumanServices) to learn more.
:::

## [Weekly Lab + Challenge](https://earobinson95.github.io/stat331-calpoly/lab-assignments/Lab3-dplyr/lab3-hiphop-lyrics.html)

![](../../lab-assignments/Lab3-dplyr/published-article.jpg)


## To do...

+ **Lab 3: Hip Hop Lyrics**
  + Due Friday, 1/27 at 11:59pm
  
+ **Challenge 3: Published Comparisons & Data Ethics**
  + Due Saturday, 1/28 at 11:59pm
  
+ **Read Chapter 4: Data Joins and Transformations**
  + **Concept Check 4.1 + 4.2** due Monday (1/30) at 8:00am
  